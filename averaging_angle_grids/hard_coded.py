"""Hard-coded Euler angle grid originally derived for the H2 STO-3G case."""

from __future__ import annotations

from typing import TYPE_CHECKING

import numpy as np

# 150-angle quadrature grid that was previously embedded inside
# ``orientational averaging/hard code grid/h2_sto3g.py``. The array layout is
# (3, N) -> rows correspond to alpha, beta, and quadrature weights.
# gamma is implicitly zero for this historical dataset, so any consumer that
# needs explicit gamma angles should pad as required.
_HARD_CODED_RAW: np.ndarray = np.array(
    [
        [
            1.07393,
            3.31052,
            1.74962,
            1.64604,
            6.10750,
            1.75961,
            5.53027,
            5.52842,
            2.28479,
            3.58752,
            1.66523,
            0.84226,
            3.29536,
            5.57673,
            2.47174,
            0.92423,
            3.93291,
            3.31288,
            1.90607,
            5.84085,
            0.38988,
            3.04104,
            3.73432,
            0.06801,
            4.53341,
            3.95200,
            4.40989,
            3.00258,
            0.72053,
            3.05150,
            3.43130,
            4.27813,
            0.33053,
            0.21824,
            1.26162,
            2.18568,
            4.36603,
            0.72968,
            0.09293,
            1.39264,
            0.61877,
            3.83971,
            1.33503,
            2.72987,
            5.64007,
            0.64928,
            4.61242,
            3.37637,
            5.84322,
            3.88503,
            3.30267,
            2.80485,
            5.96564,
            3.63200,
            3.21888,
            5.15715,
            6.16719,
            5.35457,
            0.54376,
            4.22616,
            4.85400,
            3.31674,
            1.37092,
            4.28857,
            1.13002,
            0.71738,
            0.54974,
            0.55092,
            1.24132,
            3.64290,
            1.64918,
            0.21685,
            3.08618,
            0.92048,
            2.12227,
            2.48303,
            5.11643,
            4.98922,
            5.85691,
            5.20647,
            0.55287,
            4.78971,
            0.20077,
            1.62743,
            1.16900,
            5.35471,
            3.02272,
            6.06776,
            2.18861,
            4.82467,
            5.11437,
            2.76769,
            1.87105,
            4.61828,
            4.49672,
            3.57552,
            2.38265,
            2.76245,
            4.72005,
            4.04847,
            4.67308,
            0.03871,
            5.47292,
            0.39803,
            5.04133,
            1.91134,
            2.47181,
            2.18850,
            0.02788,
            1.64398,
            2.99010,
            5.39785,
            2.22545,
            0.13728,
            4.95468,
            3.95088,
            4.48075,
            3.89107,
            5.28079,
            1.04117,
            1.52149,
            6.18079,
            5.73604,
            1.91169,
            5.92459,
            5.51662,
            3.78850,
            2.46795,
            4.85331,
            2.43693,
            0.84941,
            4.11191,
            1.05014,
            3.60250,
            2.66381,
            5.14617,
            1.60611,
            5.85919,
            6.20983,
            3.03865,
            5.79858,
            4.28145,
            2.75753,
            4.16086,
            5.81163,
            4.79705,
            1.95620,
            2.56970,
            1.91953,
            1.30330,
        ],
        [
            2.37487,
            2.01802,
            0.19298,
            1.42732,
            0.94148,
            2.87768,
            0.43346,
            2.23837,
            2.38175,
            1.86742,
            0.48430,
            1.47576,
            2.33447,
            1.61340,
            1.85509,
            2.01268,
            0.75689,
            1.06096,
            1.28682,
            2.45608,
            1.22613,
            0.85503,
            2.48750,
            2.59037,
            1.12758,
            1.08387,
            1.71823,
            2.89856,
            1.19880,
            1.82581,
            0.72273,
            2.03217,
            2.31736,
            1.47451,
            2.64602,
            1.75559,
            0.58855,
            1.75632,
            1.74660,
            1.57420,
            0.64023,
            1.67455,
            1.85446,
            1.02968,
            1.28404,
            2.56314,
            1.94129,
            0.21312,
            0.13739,
            1.37820,
            1.37309,
            2.42800,
            1.21872,
            2.18767,
            2.62084,
            2.30207,
            2.00292,
            1.40952,
            1.48686,
            1.22480,
            2.13311,
            1.69066,
            1.25267,
            2.52738,
            1.45655,
            2.25519,
            2.00568,
            2.85707,
            2.12000,
            0.96483,
            1.75524,
            2.03425,
            0.51224,
            0.89061,
            0.67305,
            1.24734,
            0.87917,
            0.58117,
            1.50352,
            2.01029,
            0.93519,
            1.36289,
            0.97133,
            0.77734,
            0.64195,
            2.56591,
            1.19311,
            1.72994,
            1.16124,
            2.76802,
            1.23525,
            1.94278,
            2.56288,
            0.31374,
            2.25460,
            1.54648,
            0.91810,
            1.35613,
            1.64956,
            2.27038,
            0.80996,
            0.41045,
            0.74431,
            1.74535,
            1.53611,
            1.60435,
            1.55181,
            1.45794,
            1.21354,
            1.09534,
            2.15902,
            1.07567,
            2.06928,
            0.69204,
            1.83188,
            2.77746,
            1.42929,
            1.99852,
            1.71301,
            1.17178,
            2.35523,
            1.46674,
            0.97673,
            2.24095,
            0.67027,
            1.93475,
            0.47169,
            2.66075,
            1.07081,
            0.42167,
            0.36992,
            1.78975,
            1.74413,
            1.25456,
            0.70579,
            3.06199,
            2.05766,
            2.12962,
            2.29422,
            1.51664,
            1.83453,
            0.90821,
            1.65087,
            1.50476,
            2.78176,
            2.47069,
            0.94743,
            2.17897,
            1.92705,
            0.94949,
        ],
        [
            0.00649606,
            0.00677567,
            0.00640311,
            0.00666473,
            0.00669922,
            0.00663394,
            0.00674343,
            0.00667127,
            0.00668776,
            0.00676721,
            0.00665191,
            0.00663109,
            0.00663458,
            0.00674962,
            0.00667875,
            0.00676506,
            0.00663678,
            0.00664742,
            0.00663493,
            0.00677988,
            0.00666949,
            0.00678447,
            0.00678442,
            0.00674655,
            0.00660888,
            0.00662420,
            0.00663710,
            0.00638865,
            0.00674299,
            0.00667288,
            0.00663664,
            0.00663669,
            0.00669460,
            0.00674184,
            0.00666331,
            0.00668894,
            0.00668811,
            0.00678161,
            0.00666844,
            0.00649848,
            0.00672334,
            0.00663329,
            0.00657182,
            0.00678480,
            0.00678987,
            0.00668689,
            0.00668108,
            0.00665181,
            0.00659894,
            0.00675097,
            0.00676891,
            0.00677254,
            0.00678260,
            0.00672571,
            0.00664667,
            0.00640289,
            0.00656302,
            0.00671165,
            0.00670240,
            0.00655946,
            0.00665147,
            0.00671663,
            0.00668897,
            0.00670018,
            0.00646668,
            0.00646788,
            0.00663172,
            0.00672750,
            0.00657072,
            0.00637692,
            0.00672365,
            0.00674388,
            0.00667000,
            0.00666926,
            0.00675168,
            0.00664912,
            0.00663779,
            0.00677741,
            0.00670043,
            0.00660064,
            0.00656175,
            0.00666901,
            0.00638311,
            0.00668824,
            0.00678113,
            0.00665192,
            0.00672800,
            0.00638353,
            0.00639049,
            0.00675165,
            0.00663724,
            0.00639167,
            0.00676403,
            0.00675114,
            0.00666951,
            0.00662358,
            0.00666779,
            0.00663807,
            0.00668906,
            0.00678518,
            0.00666891,
            0.00666294,
            0.00671233,
            0.00670227,
            0.00677799,
            0.00676458,
            0.00677420,
            0.00666742,
            0.00659765,
            0.00672893,
            0.00665960,
            0.00677759,
            0.00676543,
            0.00657994,
            0.00675244,
            0.00666695,
            0.00672720,
            0.00664683,
            0.00674483,
            0.00669447,
            0.00672329,
            0.00659747,
            0.00678974,
            0.00678624,
            0.00674990,
            0.00666400,
            0.00668276,
            0.00666590,
            0.00637544,
            0.00664386,
            0.00667255,
            0.00637753,
            0.00676400,
            0.00663239,
            0.00669928,
            0.00664242,
            0.00676106,
            0.00672395,
            0.00666835,
            0.00677843,
            0.00658002,
            0.00672617,
            0.00666076,
            0.00662597,
            0.00668821,
            0.00664327,
            0.00664268,
            0.00667836,
            0.00678659,
            0.00674897,
        ],
    ],
    dtype=float,
)


if TYPE_CHECKING:  # pragma: no cover
    from . import AngleGrid


def load_hard_coded_grid(*, copy: bool = True) -> "AngleGrid":
    """Return the historical 150-angle grid.

    Parameters
    ----------
    copy:
        When ``True`` (default) a copy of the internal array is returned so the
        caller can modify it without affecting the cached data.
    """

    from . import AngleGrid

    raw = _HARD_CODED_RAW
    alpha = raw[0].copy() if copy else raw[0]
    beta = raw[1].copy() if copy else raw[1]
    weights = raw[2].copy() if copy else raw[2]

    weights = weights / weights.sum()
    gamma = np.zeros_like(alpha)
    angles = np.column_stack((alpha, beta, gamma))
    return AngleGrid(angles=angles, weights=weights)


__all__ = ["load_hard_coded_grid"]
